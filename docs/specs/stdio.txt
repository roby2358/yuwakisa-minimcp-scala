A concise reference for LLM agents implementing the Model Context Protocol stdio transport.
Core Concept
MCP uses JSON-RPC to encode messages. JSON-RPC messages MUST be UTF-8 encoded. The client launches the MCP server as a subprocess. The server reads JSON-RPC messages from its standard input (stdin) and sends messages to its standard output (stdout).
Message Format

Protocol: JSON-RPC 2.0 over UTF-8 encoding
Delimiter: Messages are delimited by newlines, and MUST NOT contain embedded newlines
Streams:

stdin: Client → Server messages
stdout: Server → Client messages
stderr: The server MAY write UTF-8 strings to its standard error (stderr) for logging purposes. Clients MAY capture, forward, or ignore this logging



Message Types
All messages follow JSON-RPC 2.0:
Request
json{
  "jsonrpc": "2.0",
  "id": "string | number",
  "method": "string",
  "params": { ... }
}
Response
json{
  "jsonrpc": "2.0",
  "id": "string | number",
  "result": { ... }  // OR "error": { "code": number, "message": "string" }
}
Notification
json{
  "jsonrpc": "2.0",
  "method": "string",
  "params": { ... }
}
Transport Characteristics

Process Model: The client (spawns an MCP server as a child process
Communication: Communication happens through process streams: client writes to server's STDIN, server responds to STDOUT
Message Boundary: Each message is delimited by a newline character
Relationship: One-to-one relationship between client and server

Connection Lifecycle

Launch: Client spawns server as subprocess
Initialize: Client sends initialize request with capabilities
Handshake: Server responds with its capabilities
Ready: Client sends initialized notification
Operation: Normal JSON-RPC message exchange
Termination: The transport is closed (e.g., client closes stdin for stdio)

Security & Authentication
Implementations using STDIO transport SHOULD NOT follow this specification, and instead retrieve credentials from the environment - no HTTP-based authentication required.
Advantages

Performance: Very low latency and overhead (no network stack involved)
Simplicity: Direct process communication without network configuration
Security: Inherently more secure as no network exposure
Reliability: Guaranteed message delivery within the same process

Limitations

Supports only single client connections and lacks network accessibility
Local execution only
No built-in streaming support (unlike HTTP transport)

Minimal Implementation
bash# Launch server
./mcp-server

# Send initialize request (newline-delimited)
echo '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"protocolVersion":"2025-03-26","clientInfo":{"name":"client","version":"1.0"}}}' | ./mcp-server

# Send message and read response
echo '{"jsonrpc":"2.0","id":2,"method":"tools/list"}'
