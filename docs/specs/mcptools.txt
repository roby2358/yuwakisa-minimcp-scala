MCP Tools — Client ↔ Server Interactions

A pocket spec for language-model agents

The tools feature lets a server advertise callable functions that an LLM can invoke. A server that supports it must declare

"capabilities": { "tools": { "listChanged": true } }

so the client knows (a) tools exist and (b) a notification will arrive if the list later changes. (Model Context Protocol)

1. Discovering tools

Send a JSON-RPC request method:"tools/list". params may carry a cursor; the reply returns tools[] plus an optional nextCursor for pagination. Each tool entry contains name, description, inputSchema (JSON Schema), and optionally outputSchema and annotations. (Model Context Protocol)

If the server set listChanged:true, it will later emit the push-notification

{"jsonrpc":"2.0","method":"notifications/tools/list_changed"}

so the client can call tools/list again. (Model Context Protocol)

2. Calling a tool

Invoke with

{
  "jsonrpc":"2.0",
  "id":7,
  "method":"tools/call",
  "params":{
    "name":"<tool-name>",
    "arguments":{ … }        // must satisfy inputSchema
  }
}

The server may answer immediately with a normal JSON body or switch to an SSE stream (same Streamable HTTP rules as earlier). The final payload is always a JSON-RPC result:

{
  "content":[            // array of content items
    { "type":"text",   "text":"…" }  // text content (required fields: type, text)
  ],
  "structuredContent":{ },   // empty object if no structured content
  "isError":false           // true if the tool ran but failed
}

Implementation Notes:
- content[] must contain at least one item
- Each content item must have a "type" field
- For text content, both "type" and "text" fields are required
- structuredContent is always present (empty object if no structured data)
- nextCursor is always a string (empty string if no more results)

Large or long-running calls should surface progress via SSE chunks or a side-channel notifications/cancelled (see parent spec).

3. Errors

Protocol-level problems (unknown tool, bad args, etc.) use standard JSON-RPC errors such as -32602.
A tool that executes but fails sets isError:true inside its result and explains the failure in content.

4. Security in one breath

Servers must validate every argument, rate-limit and auth calls, and mark dangerous outputs. Clients should confirm sensitive invocations with a human, time-out slow calls, and log everything.

TL;DR
Advertise tools, let the client tools/list, call with tools/call, stream if needed, push notifications/tools/list_changed when the catalogue shifts, and wrap every payload in the familiar JSON-RPC envelope.
